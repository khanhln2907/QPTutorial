//.$file${.::bsp.cpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: blinky_bsp-teeny4.qm
// File:  ${.::bsp.cpp}
//
// This code has been generated by QM 5.1.3 <www.state-machine.com/qm/>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// This program is open source software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
// for more details.
//
//.$endhead${.::bsp.cpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#include <qpcpp.hpp>   // QP-C++ framework
#include "blinky.hpp"  // Blinky application interface
#include "bsp.hpp"     // Board Support Package (BSP)
#include <Arduino.h>

#ifdef Q_SPY
    #include <qs.hpp>
#endif
using namespace QP;

static QP::QSpyId const l_TIMER_ID = { 0U }; // QSpy source ID

struct DefaultType{
    uint8_t dummy[10];
};

//----------------------------------------------------------------------------
// BSP functions
enum {
   LED = 100
};

void BSP::init(){
    // Initialize framework
	QP::QF::init();
	
	#ifdef Q_SPY
		QS_INIT(nullptr);
		// setup the QS filters...
		QS_GLB_FILTER(QP::QS_SM_RECORDS); // state machine records
		QS_GLB_FILTER(QP::QS_AO_RECORDS); // active object records
		QS_GLB_FILTER(QP::QS_UA_RECORDS); // all user records

		// Add HSM top state.
		QS_FUN_DICTIONARY(&QHsm::top);
        // QS_USR_DICTIONARY(LED);
	#endif

    // Configure serial port before assigning to QP 
    Serial.begin(115200);

	// Initialize publish-subscribe system
	static QP::QSubscrList subscrSto[MAX_SIG];
	QF::psInit(subscrSto, Q_DIM(subscrSto));// Override the initialization

	// Initialize event pools... Attention: this has to be called AFTER QS_INIT
	DMAMEM static QF_MPOOL_EL(DefaultType) smlPoolSto[100];
	QP::QF::poolInit(smlPoolSto, sizeof(smlPoolSto), sizeof(smlPoolSto[0]));

	pinMode(LED_BUILTIN, OUTPUT);
}
//............................................................................
void BSP::ledOff(void) {
    digitalWriteFast(LED_BUILTIN, LOW);
    QS_BEGIN_ID(LED, AO_Blinky->m_prio)
		QS_STR("LED OFF");
       //QS_U8(1, 0);
    QS_END()
}
//............................................................................
void BSP::ledOn(void) {
    digitalWriteFast(LED_BUILTIN, HIGH);
    QS_BEGIN_ID(LED, AO_Blinky->m_prio)
       QS_STR("LED ON");
    QS_END()
}

